import * as tslib_1 from "tslib";
import { checkParams } from '../../utils/checkParams';
import { Api } from '../../constants/Api';
import { mini } from '../../pipe/mini';
import { InvalidJSONError } from '../../errors/InvalidJSONError';
export function MiniService(httpRequest) {
    return {
        queryFaceCertifyId: function (params) {
            return tslib_1.__awaiter(this, void 0, void 0, function () {
                return tslib_1.__generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            checkParams(params, ['bizId', 'zimId', 'faceType', 'needImg']);
                            return [4, httpRequest.execute({
                                    method: Api.mini.queryFaceCertifyId,
                                    params: params
                                })];
                        case 1: return [2, _a.sent()];
                    }
                });
            });
        },
        queryFaceVerified: function (params) {
            return tslib_1.__awaiter(this, void 0, void 0, function () {
                var newParams;
                return tslib_1.__generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            checkParams(params, ['bizId', 'zimId']);
                            newParams = tslib_1.__assign({}, params);
                            if (params.externParam) {
                                try {
                                    newParams.externParam = JSON.stringify(params.externParam);
                                }
                                catch (e) {
                                    throw InvalidJSONError();
                                }
                            }
                            return [4, httpRequest.execute({
                                    method: Api.mini.queryFaceVerified,
                                    params: params,
                                })];
                        case 1: return [2, _a.sent()];
                    }
                });
            });
        },
        createQrcode: function (params) {
            return tslib_1.__awaiter(this, void 0, void 0, function () {
                var newParams;
                return tslib_1.__generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            checkParams(params, ['urlParam', 'queryParam', 'describe']);
                            newParams = {
                                urlParam: params.urlParam,
                                queryParam: mini.convertQueryParams(params.queryParam),
                                describe: params.describe,
                            };
                            return [4, httpRequest.execute({
                                    method: Api.mini.qrcodeCreate,
                                    params: newParams,
                                })];
                        case 1: return [2, _a.sent()];
                    }
                });
            });
        },
        sendTemplateMessage: function (params) {
            return tslib_1.__awaiter(this, void 0, void 0, function () {
                var newParams;
                return tslib_1.__generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            checkParams(params, ['toUserId', 'formId', 'userTemplateId', 'page', 'data']);
                            newParams = {
                                toUserId: params.toUserId,
                                formId: params.formId,
                                userTemplateId: params.userTemplateId,
                                page: params.page,
                                data: '',
                            };
                            try {
                                newParams.data = JSON.stringify(params.data);
                            }
                            catch (e) {
                                throw InvalidJSONError();
                            }
                            return [4, httpRequest.execute({
                                    method: Api.mini.templateMessageSend,
                                    params: params,
                                })];
                        case 1: return [2, _a.sent()];
                    }
                });
            });
        },
        detectRiskContent: function (params) {
            return tslib_1.__awaiter(this, void 0, void 0, function () {
                return tslib_1.__generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            checkParams(params, ['content']);
                            return [4, httpRequest.execute({
                                    method: Api.mini.riskDetectContent,
                                    params: params,
                                })];
                        case 1: return [2, _a.sent()];
                    }
                });
            });
        }
    };
}
