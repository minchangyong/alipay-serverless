import * as tslib_1 from "tslib";
import { Api } from '../../constants/Api';
import { MediaType } from '../../constants/MediaType';
import { checkParams } from '../../utils/checkParams';
import { base } from '../../pipe/base';
export function BaseService(httpRequest) {
    return {
        oauth: {
            getToken: function (params) {
                return tslib_1.__awaiter(this, void 0, void 0, function () {
                    return tslib_1.__generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                checkParams(params, ['grantType']);
                                return [4, httpRequest.execute({
                                        method: Api.base.getToken,
                                        params: params,
                                    })];
                            case 1: return [2, _a.sent()];
                        }
                    });
                });
            },
        },
        exec: function (method, params) {
            return tslib_1.__awaiter(this, void 0, void 0, function () {
                return tslib_1.__generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, httpRequest.execute({
                                method: method,
                                params: params,
                            })];
                        case 1: return [2, _a.sent()];
                    }
                });
            });
        },
        uploadImage: function (params) {
            return tslib_1.__awaiter(this, void 0, void 0, function () {
                var res;
                return tslib_1.__generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            checkParams(params, ['filePath', 'fileName']);
                            return [4, httpRequest.execute({
                                    method: Api.base.upload,
                                    params: {
                                        imageName: params.fileName,
                                        imageContent: params.filePath,
                                        imageType: !params.fileType ? MediaType.JPG : params.fileType,
                                    }
                                })];
                        case 1:
                            res = _a.sent();
                            return [2, base.convertUploadResponse(res)];
                    }
                });
            });
        },
        uploadVideo: function (params) {
            return tslib_1.__awaiter(this, void 0, void 0, function () {
                var res;
                return tslib_1.__generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            checkParams(params, ['filePath', 'fileName']);
                            return [4, httpRequest.execute({
                                    method: Api.base.upload,
                                    params: {
                                        imageName: params.fileName,
                                        imageContent: params.filePath,
                                        imageType: MediaType.MP4,
                                    },
                                })];
                        case 1:
                            res = _a.sent();
                            return [2, base.convertUploadResponse(res)];
                    }
                });
            });
        },
        getUserInfo: function (params) {
            if (params === void 0) { params = {}; }
            return tslib_1.__awaiter(this, void 0, void 0, function () {
                var res;
                return tslib_1.__generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, httpRequest.execute({
                                method: Api.base.getUserInfo,
                                params: params,
                            })];
                        case 1:
                            res = _a.sent();
                            return [2, res];
                    }
                });
            });
        },
    };
}
