import * as tslib_1 from "tslib";
import { Api } from '../../constants/Api';
import { checkParams } from '../../utils/checkParams';
import { PayScene } from '../../constants/PayScene';
export function PaymentService(httpRequest) {
    return {
        pay: function (params) {
            return tslib_1.__awaiter(this, void 0, void 0, function () {
                var newParams;
                return tslib_1.__generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            checkParams(params, ['outTradeNo', 'authCode', 'subject', 'totalAmount']);
                            newParams = tslib_1.__assign({}, params);
                            if (!params.scene) {
                                newParams.scene = PayScene.BAR_CODE;
                            }
                            return [4, httpRequest.execute({
                                    method: Api.payment.pay,
                                    params: newParams,
                                })];
                        case 1: return [2, _a.sent()];
                    }
                });
            });
        },
        create: function (params) {
            return tslib_1.__awaiter(this, void 0, void 0, function () {
                return tslib_1.__generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            checkParams(params, ['outTradeNo', 'totalAmount', 'subject', 'buyerId']);
                            return [4, httpRequest.execute({
                                    method: Api.payment.create,
                                    params: params,
                                })];
                        case 1: return [2, _a.sent()];
                    }
                });
            });
        },
        query: function (params) {
            return tslib_1.__awaiter(this, void 0, void 0, function () {
                return tslib_1.__generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            checkParams(params, ['outTradeNo']);
                            return [4, httpRequest.execute({
                                    method: Api.payment.query,
                                    params: params,
                                })];
                        case 1: return [2, _a.sent()];
                    }
                });
            });
        },
        refund: function (params) {
            return tslib_1.__awaiter(this, void 0, void 0, function () {
                return tslib_1.__generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            checkParams(params, ['outTradeNo', 'refundAmount']);
                            return [4, httpRequest.execute({
                                    method: Api.payment.refund,
                                    params: params,
                                })];
                        case 1: return [2, _a.sent()];
                    }
                });
            });
        },
        close: function (params) {
            return tslib_1.__awaiter(this, void 0, void 0, function () {
                return tslib_1.__generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            checkParams(params, ['outTradeNo']);
                            return [4, httpRequest.execute({
                                    method: Api.payment.close,
                                    params: params,
                                })];
                        case 1: return [2, _a.sent()];
                    }
                });
            });
        },
        cancel: function (params) {
            return tslib_1.__awaiter(this, void 0, void 0, function () {
                return tslib_1.__generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            checkParams(params, ['outTradeNo']);
                            return [4, httpRequest.execute({
                                    method: Api.payment.cancel,
                                    params: params,
                                })];
                        case 1: return [2, _a.sent()];
                    }
                });
            });
        },
        getBillUrl: function (params) {
            return tslib_1.__awaiter(this, void 0, void 0, function () {
                return tslib_1.__generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            checkParams(params, ['billType', 'billDate']);
                            return [4, httpRequest.execute({
                                    method: Api.payment.getBillUrl,
                                    params: params,
                                })];
                        case 1: return [2, _a.sent()];
                    }
                });
            });
        }
    };
}
