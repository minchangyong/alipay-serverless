import { get, set } from 'alipay-mini-lib';
import { CloudSDKError } from './errors/CloudSDKError';
import { ErrorCode } from './constants/Error';
import { request } from "./utils/request";
import { PaymentService } from './services/payment/PaymentService';
import { BaseService } from './services/base/BaseService';
import { MiniService } from './services/mini/MiniService';
import { MarketingService } from './services/marketing/MarketingService';
import { each } from './utils/each';
var Cloud = (function () {
    function Cloud() {
        this._isInit = false;
        this._services = {};
    }
    Object.defineProperty(Cloud.prototype, "services", {
        get: function () {
            if (!this._isInit) {
                throw new CloudSDKError({
                    errCode: ErrorCode.SYS_INIT,
                    errMsg: '请先调用 init 完成初始化后再调用云 API。',
                });
            }
            return this._services;
        },
        enumerable: true,
        configurable: true
    });
    Cloud.prototype.wrapApi = function (fn) {
        var _this = this;
        return function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            if (!_this._isInit) {
                throw new CloudSDKError({
                    errCode: ErrorCode.SYS_INIT,
                    errMsg: '请先调用 .init 方法完成初始化后再调用云 API。',
                });
            }
            return fn.apply(_this, args);
        };
    };
    Cloud.prototype.init = function (serverless, config) {
        if (config === void 0) { config = {}; }
        if (!serverless) {
            throw new CloudSDKError({
                errCode: ErrorCode.INVALID_PARAM,
                errMsg: '请传入 mpserverless 实例'
            });
        }
        if (!serverless.function) {
            throw new CloudSDKError({
                errCode: ErrorCode.INVALID_PARAM,
                errMsg: '请检查 mpserverless 实例是否正确，alipay-cloud-sdk 依赖 mpserverless.function 方法'
            });
        }
        if (this._isInit) {
            return;
        }
        this._isInit = true;
        this.registerServices(serverless, config);
    };
    Cloud.prototype.registerServices = function (serverless, config) {
        var _this = this;
        var _a = this.initServices(serverless, config), base = _a.base, payment = _a.payment, marketing = _a.marketing, mini = _a.mini;
        [{
                name: 'base',
                service: base,
            }, {
                name: 'base.oauth',
                service: base.oauth,
            }, {
                name: 'payment',
                service: payment,
            }, {
                name: 'mini',
                service: mini,
            }, {
                name: 'ap.marketing',
                service: marketing,
            }].forEach(function (item) {
            var result = get(_this.services, item.name);
            if (!result) {
                set(_this.services, item.name, {});
            }
            each(item.service, function (api, key) {
                item.service[key] = _this.wrapApi(api);
            });
            set(_this._services, item.name, item.service);
        });
    };
    Cloud.prototype.initServices = function (serverless, config) {
        var httpRequest = request(serverless, config);
        var base = BaseService(httpRequest);
        var payment = PaymentService(httpRequest);
        var mini = MiniService(httpRequest);
        var marketing = MarketingService(httpRequest);
        return {
            base: base,
            payment: payment,
            mini: mini,
            marketing: marketing,
        };
    };
    return Cloud;
}());
export { Cloud };
