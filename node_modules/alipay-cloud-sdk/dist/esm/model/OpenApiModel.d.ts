import { MediaType } from '../constants/MediaType';
import { TradeStatus } from '../constants/TradeStatus';
import { PayScene } from '../constants/PayScene';
import { FaceType } from '../constants/FaceType';
import { RecognitionType } from '../constants/RecognitionType';
import { UpdateInstanceStatus } from '../constants/UpdateInstanceStatus';
import { BillType } from '../constants/BillType';
import { BuyerUserType } from '../constants/BuyerUserType';
import { GrantType } from '../constants/GrantType';
import { CampSource } from '../constants/CampSource';
import { GenderType } from '../constants/GenderType';
import { AlipayUserStatus } from '../constants/AlipayUserStatus';
import { UserType } from '../constants/UserType';
import { IsStudentCertified } from '../constants/IsStudentCertified';
import { IsCertified } from '../constants/IsCertified';
export declare namespace CommonModel {
    interface JSONObject<T> {
        [key: string]: T;
    }
    interface Response {
        code: string;
        msg: string;
        subCode?: string;
        subMsg?: string;
    }
}
export declare namespace BaseModel {
    interface Media {
        fileName: string;
        filePath: string;
        fileType?: MediaType;
    }
    interface MediaRequest {
        imageType: MediaType;
        imageName: string;
        imageContent: string;
    }
    interface OpenMediaResponse extends CommonModel.Response {
        imageId: string;
        imageUrl: string;
    }
    interface MediaResponse extends CommonModel.Response {
        fileId: string;
        fileUrl: string;
    }
    interface GetUserInfoRequest {
        authToken?: string;
    }
    interface GetUserInfoResponse extends CommonModel.Response {
        userId: string;
        avatar: string;
        province: string;
        city: string;
        nickName: string;
        isStudentCertified: IsStudentCertified;
        userType: UserType;
        userStatus: AlipayUserStatus;
        isCertified: IsCertified;
        gender: GenderType;
    }
    interface GetTokenRequest {
        grantType: GrantType;
        code?: string;
        refreshToken?: string;
    }
    interface GetTokenResponse extends CommonModel.Response {
        alipayUserId: string;
        userId: string;
        accessToken: string;
        expiresIn: string;
        refreshToken: string;
        reExpiresIn: string;
        authTokenType?: string;
    }
}
export declare namespace PaymentModel {
    interface CreateRequest {
        outTradeNo: string;
        totalAmount: string;
        subject: string;
        buyerId: string;
    }
    interface CreateResponse extends CommonModel.Response {
        outTradeNo: string;
        tradeNo: string;
    }
    interface QueryRequest {
        outTradeNo: string;
    }
    interface QueryResponse extends CommonModel.Response {
        tradeNo: string;
        outTradeNo: string;
        buyerLogonId: string;
        tradeStatus: TradeStatus;
        totalAmount: string;
        buyerUserId: string;
        discountGoodsDetail: string;
        fundBillList: FundBillList[];
        openId?: string;
        transCurrency?: string;
        settleCurrency?: string;
        settleAmount?: number;
        payCurrency?: string;
        payAmount?: string;
        settleTransRate?: string;
        transPayRate?: string;
        buyerPayAmount?: number;
        pointAmount?: number;
        invoiceAmount?: number;
        sendPayDate?: string;
        alipayStoreId?: string;
        receiptAmount?: string;
        storeId?: string;
        terminalId?: string;
        storeName?: string;
        industrySepcDetail?: string;
        voucherDetailList?: VoucherDetailList[];
        chargeAmount?: string;
        chargeFlags?: string;
        settlementId?: string;
        tradeSettleInfo?: TradeSettleInfo;
        authTradePayMode?: string;
        buyerUserType?: BuyerUserType;
        mdiscountAmount?: string;
        discountAmount?: string;
        buyerUserName?: string;
        subject?: string;
        body?: string;
        alipaySubMerchantId?: string;
        extInfos?: string;
    }
    interface PayRequest {
        outTradeNo: string;
        authCode: string;
        subject: string;
        totalAmount: string;
        scene?: PayScene;
    }
    interface PayResponse extends CommonModel.Response {
        tradeNo: string;
        outTradeNo: string;
        openId: string;
        buyerLogonId: string;
        totalAmount: string;
        receiptAmount: string;
        gmtPayment: string;
        buyerUserId: string;
        fundBillList: FundBillList[];
        transCurrency?: string;
        settleCurrency?: string;
        settleAmount?: number;
        payCurrency?: string;
        payAmount?: string;
        settleTransRate?: string;
        transPayRate?: string;
        buyerPayAmount?: number;
        pointAmount?: number;
        invoiceAmount?: number;
        cardBalance?: string;
        storeName?: string;
        discountGoodsDetail?: string;
        asyncPaymentMode?: string;
        voucherDetailList?: VoucherDetailList[];
        advanceAmount?: string;
        authTradePayMode?: string;
        chargeAmount?: string;
        chargeFlags?: string;
        settlementId?: string;
        businessParams?: string;
        buyerUserType?: BuyerUserType;
        mdiscountAmount?: string;
        discountAmount?: string;
        buyerUserName?: string;
    }
    interface RefundRequest {
        outTradeNo: string;
        refundAmount: string;
    }
    interface RefundResponse extends CommonModel.Response {
        tradeNo: string;
        outTradeNo: string;
        openId: string;
        buyerLogonId: string;
        fundChange: string;
        refundFee: number;
        gmtRefundPay: string;
        buyerUserId: string;
        refundCurrency?: string;
        refundDetailItemList?: RefundDetailItemList[];
        storeName?: string;
        sendBackFee?: string;
        refundPresetPaytoolList?: RefundPresetPayToolList;
        refundChargeAmount?: string;
        refundSettlementId?: string;
        presentRefundBuyerAmount?: string;
        presentRefundDiscountAmount?: string;
        presentRefundMdiscountAmount?: string;
    }
    interface CloseRequest {
        outTradeNo: string;
    }
    interface CloseResponse extends CommonModel.Response {
        tradeNo: string;
        outTradeNo: string;
    }
    interface CancelRequest {
        outTradeNo: string;
    }
    interface CancelResponse extends CommonModel.Response {
        tradeNo: string;
        outTradeNo: string;
        retryFlag: string;
        action: string;
        gmtRefundPay?: string;
        refundSettlementId?: string;
    }
    interface GetBillUrlRequest {
        billType: BillType;
        billDate: string;
    }
    interface GetBillUrlResponse extends CommonModel.Response {
        billDownloadUrl: string;
    }
    interface TradeSettleDetailList {
        operationType: string;
        operationSerialNo: string;
        operationDt: string;
        transOut: string;
        transIn: string;
        amount: number;
    }
    interface TradeSettleInfo {
        tradeSettleDetailList: TradeSettleDetailList[];
    }
    interface VoucherDetailList {
        id: string;
        name: string;
        type: string;
        amount: number;
        merchantContribute?: number;
        otherContribute?: number;
        memo?: string;
        templateId?: string;
        otherContributeDetail?: OtherContributeDetail[];
        purchaseBuyerContribute?: number;
        purchaseMerchantContribute?: number;
        purchaseAntContribute?: number;
    }
    interface OtherContributeDetail {
        contributeType: string;
        contributeAmount: number;
    }
    interface FundBillList {
        fundChannel: string;
        amount: number;
        bankCode?: string;
        realAmount?: number;
        fundType?: string;
    }
    interface RefundPresetPayToolList {
        amount: number[];
        assertTypeCode: string;
    }
    interface RefundDetailItemList {
        fundChannel: string;
        bankCode: string;
        amount: number;
        realAmount: number;
        fundType: string;
    }
}
export declare namespace MiniModel {
    import JSONObject = CommonModel.JSONObject;
    interface QueryFaceCertifyIdRequest {
        bizId: string;
        zimId: string;
        faceType: FaceType;
        needImg: boolean;
    }
    interface QueryFaceVerifiedRequest {
        bizId: string;
        zimId: string;
        externParam?: string | JSONObject<string>;
    }
    interface QrcodeCreateRawRequest {
        urlParam: string;
        queryParam: string;
        describe: string;
    }
    interface QrcodeCreateRequest {
        urlParam: string;
        queryParam: JSONObject<string>;
        describe: string;
    }
    interface TemplateMessageSendBaseRequest {
        toUserId: string;
        formId: string;
        userTemplateId: string;
        page: string;
    }
    interface TemplateMessageSendRequest extends TemplateMessageSendBaseRequest {
        data: JSONObject<{
            value: string;
        }>;
    }
    interface TemplateMessageSendRawRequest extends TemplateMessageSendBaseRequest {
        data: string;
    }
    interface DetectContentRequest {
        content: string;
    }
    interface QueryFaceCertifyIdResponse extends CommonModel.Response {
        bizId: string;
        zimCode: string;
        zimMsg: string;
        imgStr: string;
        faceAttrInfo: FaceAttrInfo;
    }
    interface QueryFaceVerifiedResponse extends CommonModel.Response {
        externInfo: string;
    }
    interface QrcodeCreateResponse extends CommonModel.Response {
        qrCodeUrl: string;
    }
    interface DetectContentResponse extends CommonModel.Response {
        action: string;
        keywords: string[];
        uniqueId: string;
    }
    interface TemplateMessageSendResponse extends CommonModel.Response {
    }
    interface FaceAttrInfo {
        rect: string;
    }
}
export declare namespace MarketingModel {
    import JSONObject = CommonModel.JSONObject;
    interface CreateTemplateRequest {
        uniqueId: string;
        tplContent: JSONObject<string>;
    }
    interface UpdateTemplateRequest {
        tplId: string;
        tplContent: JSONObject<string>;
    }
    interface CreateTemplateRawRequest {
        uniqueId: string;
        tplContent: string;
    }
    interface UpdateTemplateRawRequest {
        tplId: string;
        tplContent: string;
    }
    interface TemplateRawResponse extends CommonModel.Response {
        success: string;
        result: string;
    }
    interface CreateTemplateBizResult {
        errorCode: string;
        errorMsg: string;
        tplId: string;
        tplParams: string[];
    }
    interface UpdateTemplateBizResult {
        errorCode: string;
        errorMsg: string;
        serialNumber: string;
        passId: string;
        operation: string;
    }
    interface CreateTemplateResponse extends CommonModel.Response {
        success: boolean;
        result: CreateTemplateBizResult;
    }
    interface UpdateTemplateResponse extends CommonModel.Response {
        success: boolean;
        result: UpdateTemplateBizResult;
    }
    interface AddInstanceRequest {
        tplId: string;
        tplParams: string | JSONObject<string>;
        recognitionType: RecognitionType;
        recognitionInfo: {
            partnerId: string;
            outTradeNo: string;
        };
    }
    interface InstanceRawResponse extends CommonModel.Response {
        success: string;
        result: string;
    }
    interface InstanceResultResponse {
        serialNumber: string;
        passId: string;
        operate: string;
        errorCode: string;
        errorMsg: string;
    }
    interface InstanceResponse extends CommonModel.Response {
        success: boolean;
        result: InstanceResultResponse;
    }
    interface UpdateInstanceRequest {
        serialNumber: string;
        channelId: string;
        tplParams?: JSONObject<string>;
        status?: UpdateInstanceStatus;
        verifyCode?: string;
        verifyType?: string;
    }
    interface TriggerCashRequest {
        userId: string;
        crowdNo: string;
        loginId?: string;
        orderPrice?: string;
        outBizNo?: string;
    }
    interface TriggerCashResponse extends CommonModel.Response {
        triggerResult: string;
        prizeAmount?: string;
        repeatTriggerFlag?: string;
        partnerId?: string;
        errorMsg?: string;
        couponName?: string;
        prizeMsg?: string;
        merchantLogo?: string;
        bizNo?: string;
        outBizNo?: string;
    }
    interface TriggerDrawCampRequest {
        userId?: string;
        campId: string;
        loginId?: string;
        bindMobile?: string;
        campSource?: CampSource;
        jsonUa?: string;
        channelInfo?: string;
        clientIp?: string;
        outBizNo?: string;
    }
    interface TriggerDrawCampResponse extends CommonModel.Response {
        triggerResult: string;
        prizeId?: string;
        prizeName?: string;
        campLogId?: string;
        campId?: string;
        prizeFlag?: string;
    }
}
