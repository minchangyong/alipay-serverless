import { BaseModel, CommonModel, MarketingModel, MiniModel, PaymentModel } from './OpenApiModel';
import { BaasModel } from './BaasModel';
export declare namespace ExportModel {
    import Response = CommonModel.Response;
    import JSONObject = CommonModel.JSONObject;
    import FunctionResponse = BaasModel.FunctionResponse;
    import MediaResponse = BaseModel.MediaResponse;
    import Media = BaseModel.Media;
    import PayResponse = PaymentModel.PayResponse;
    import PayRequest = PaymentModel.PayRequest;
    import CreateRequest = PaymentModel.CreateRequest;
    import CreateResponse = PaymentModel.CreateResponse;
    import QueryResponse = PaymentModel.QueryResponse;
    import QueryRequest = PaymentModel.QueryRequest;
    import RefundRequest = PaymentModel.RefundRequest;
    import RefundResponse = PaymentModel.RefundResponse;
    import CloseRequest = PaymentModel.CloseRequest;
    import CloseResponse = PaymentModel.CloseResponse;
    import CancelRequest = PaymentModel.CancelRequest;
    import CancelResponse = PaymentModel.CancelResponse;
    import GetBillUrlRequest = PaymentModel.GetBillUrlRequest;
    import GetBillUrlResponse = PaymentModel.GetBillUrlResponse;
    import QueryFaceCertifyIdRequest = MiniModel.QueryFaceCertifyIdRequest;
    import DetectContentRequest = MiniModel.DetectContentRequest;
    import QueryFaceVerifiedRequest = MiniModel.QueryFaceVerifiedRequest;
    import QrcodeCreateRequest = MiniModel.QrcodeCreateRequest;
    import TemplateMessageSendRequest = MiniModel.TemplateMessageSendRequest;
    import QueryFaceCertifyIdResponse = MiniModel.QueryFaceCertifyIdResponse;
    import QueryFaceVerifiedResponse = MiniModel.QueryFaceVerifiedResponse;
    import QrcodeCreateResponse = MiniModel.QrcodeCreateResponse;
    import TemplateMessageSendResponse = MiniModel.TemplateMessageSendResponse;
    import DetectContentResponse = MiniModel.DetectContentResponse;
    import AddInstanceRequest = MarketingModel.AddInstanceRequest;
    import UpdateInstanceRequest = MarketingModel.UpdateInstanceRequest;
    import InstanceResponse = MarketingModel.InstanceResponse;
    import CreateTemplateRequest = MarketingModel.CreateTemplateRequest;
    import UpdateTemplateRequest = MarketingModel.UpdateTemplateRequest;
    import CreateTemplateResponse = MarketingModel.CreateTemplateResponse;
    import UpdateTemplateResponse = MarketingModel.UpdateTemplateResponse;
    import TriggerCashRequest = MarketingModel.TriggerCashRequest;
    import TriggerCashResponse = MarketingModel.TriggerCashResponse;
    import TriggerDrawCampRequest = MarketingModel.TriggerDrawCampRequest;
    import TriggerDrawCampResponse = MarketingModel.TriggerDrawCampResponse;
    import GetTokenResponse = BaseModel.GetTokenResponse;
    import GetTokenRequest = BaseModel.GetTokenRequest;
    import GetUserInfoResponse = BaseModel.GetUserInfoResponse;
    import GetUserInfoRequest = BaseModel.GetUserInfoRequest;
    interface ExportBase {
        oauth: {
            getToken(params: GetTokenRequest): Promise<FunctionResponse<GetTokenResponse>>;
        };
        exec(method: string, params: JSONObject<any>): Promise<FunctionResponse<any>>;
        uploadImage(params: Media): Promise<FunctionResponse<MediaResponse | Response>>;
        uploadVideo(params: Media): Promise<FunctionResponse<MediaResponse | Response>>;
        getUserInfo(params: GetUserInfoRequest): Promise<FunctionResponse<GetUserInfoResponse>>;
    }
    interface ExportPayment {
        pay(params: PayRequest): Promise<FunctionResponse<PayResponse>>;
        create(params: CreateRequest): Promise<FunctionResponse<CreateResponse>>;
        query(params: QueryRequest): Promise<FunctionResponse<QueryResponse>>;
        refund(params: RefundRequest): Promise<FunctionResponse<RefundResponse>>;
        close(params: CloseRequest): Promise<FunctionResponse<CloseResponse>>;
        cancel(params: CancelRequest): Promise<FunctionResponse<CancelResponse>>;
        getBillUrl(params: GetBillUrlRequest): Promise<FunctionResponse<GetBillUrlResponse>>;
    }
    interface ExportMini {
        queryFaceCertifyId(params: QueryFaceCertifyIdRequest): Promise<FunctionResponse<QueryFaceCertifyIdResponse>>;
        queryFaceVerified(params: QueryFaceVerifiedRequest): Promise<FunctionResponse<QueryFaceVerifiedResponse>>;
        createQrcode(params: QrcodeCreateRequest): Promise<FunctionResponse<QrcodeCreateResponse>>;
        sendTemplateMessage(params: TemplateMessageSendRequest): Promise<FunctionResponse<TemplateMessageSendResponse>>;
        detectRiskContent(params: DetectContentRequest): Promise<FunctionResponse<DetectContentResponse>>;
    }
    interface ExportMarketing {
        createTemplate(params: CreateTemplateRequest): Promise<FunctionResponse<CreateTemplateResponse>>;
        updateTemplate(params: UpdateTemplateRequest): Promise<FunctionResponse<UpdateTemplateResponse>>;
        addInstance(params: AddInstanceRequest): Promise<FunctionResponse<InstanceResponse>>;
        updateInstance(params: UpdateInstanceRequest): Promise<FunctionResponse<InstanceResponse>>;
        triggerCash(params: TriggerCashRequest): Promise<FunctionResponse<TriggerCashResponse>>;
        triggerDrawCamp(params: TriggerDrawCampRequest): Promise<FunctionResponse<TriggerDrawCampResponse>>;
    }
    interface ExportAlipayApi {
        marketing: ExportMarketing;
    }
    interface ExportApi {
        base: ExportBase;
        payment: ExportPayment;
        mini: ExportMini;
        ap: ExportAlipayApi;
    }
}
