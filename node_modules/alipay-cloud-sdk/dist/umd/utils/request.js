(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "./safeAccess", "../errors/CloudSDKError", "../constants/Error"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    const safeAccess_1 = require("./safeAccess");
    const CloudSDKError_1 = require("../errors/CloudSDKError");
    const Error_1 = require("../constants/Error");
    function convertRequest(req, config) {
        const newReq = { ...req };
        const notify = safeAccess_1.get(config, config => config.notify, null);
        const env = safeAccess_1.get(config, config => config.env, null);
        newReq.params.$config = {};
        if (notify) {
            if (!notify.url) {
                throw new CloudSDKError_1.CloudSDKError({
                    errCode: Error_1.ErrorCode.INVALID_PARAM,
                    errMsg: '初始化配置 notify.url 必须填写消息回调地址，比如：https://<your_host>/api',
                });
            }
            newReq.params.$config.notify = { ...notify };
        }
        if (env) {
            newReq.params.$config.env = env;
        }
        return newReq;
    }
    exports.convertRequest = convertRequest;
    exports.request = (serverless, config = {}) => {
        return {
            execute(req) {
                const newReq = convertRequest(req, config);
                return serverless.function.invoke('alipay-openapi', newReq);
            }
        };
    };
});
