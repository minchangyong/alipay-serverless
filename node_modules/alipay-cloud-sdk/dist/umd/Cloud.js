(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "alipay-mini-lib", "./errors/CloudSDKError", "./constants/Error", "./utils/request", "./services/payment/PaymentService", "./services/base/BaseService", "./services/mini/MiniService", "./services/marketing/MarketingService", "./utils/each"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    const alipay_mini_lib_1 = require("alipay-mini-lib");
    const CloudSDKError_1 = require("./errors/CloudSDKError");
    const Error_1 = require("./constants/Error");
    const request_1 = require("./utils/request");
    const PaymentService_1 = require("./services/payment/PaymentService");
    const BaseService_1 = require("./services/base/BaseService");
    const MiniService_1 = require("./services/mini/MiniService");
    const MarketingService_1 = require("./services/marketing/MarketingService");
    const each_1 = require("./utils/each");
    class Cloud {
        constructor() {
            this._isInit = false;
            this._services = {};
        }
        get services() {
            if (!this._isInit) {
                throw new CloudSDKError_1.CloudSDKError({
                    errCode: Error_1.ErrorCode.SYS_INIT,
                    errMsg: '请先调用 init 完成初始化后再调用云 API。',
                });
            }
            return this._services;
        }
        wrapApi(fn) {
            return (...args) => {
                if (!this._isInit) {
                    throw new CloudSDKError_1.CloudSDKError({
                        errCode: Error_1.ErrorCode.SYS_INIT,
                        errMsg: '请先调用 .init 方法完成初始化后再调用云 API。',
                    });
                }
                return fn.apply(this, args);
            };
        }
        init(serverless, config = {}) {
            if (!serverless) {
                throw new CloudSDKError_1.CloudSDKError({
                    errCode: Error_1.ErrorCode.INVALID_PARAM,
                    errMsg: '请传入 mpserverless 实例'
                });
            }
            if (!serverless.function) {
                throw new CloudSDKError_1.CloudSDKError({
                    errCode: Error_1.ErrorCode.INVALID_PARAM,
                    errMsg: '请检查 mpserverless 实例是否正确，alipay-cloud-sdk 依赖 mpserverless.function 方法'
                });
            }
            if (this._isInit) {
                return;
            }
            this._isInit = true;
            this.registerServices(serverless, config);
        }
        registerServices(serverless, config) {
            const { base, payment, marketing, mini } = this.initServices(serverless, config);
            [{
                    name: 'base',
                    service: base,
                }, {
                    name: 'base.oauth',
                    service: base.oauth,
                }, {
                    name: 'payment',
                    service: payment,
                }, {
                    name: 'mini',
                    service: mini,
                }, {
                    name: 'ap.marketing',
                    service: marketing,
                }].forEach(item => {
                const result = alipay_mini_lib_1.get(this.services, item.name);
                if (!result) {
                    alipay_mini_lib_1.set(this.services, item.name, {});
                }
                each_1.each(item.service, (api, key) => {
                    item.service[key] = this.wrapApi(api);
                });
                alipay_mini_lib_1.set(this._services, item.name, item.service);
            });
        }
        initServices(serverless, config) {
            const httpRequest = request_1.request(serverless, config);
            const base = BaseService_1.BaseService(httpRequest);
            const payment = PaymentService_1.PaymentService(httpRequest);
            const mini = MiniService_1.MiniService(httpRequest);
            const marketing = MarketingService_1.MarketingService(httpRequest);
            return {
                base,
                payment,
                mini,
                marketing,
            };
        }
    }
    exports.Cloud = Cloud;
});
