(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "../../constants/Api", "../../constants/MediaType", "../../utils/checkParams", "../../pipe/base"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    const Api_1 = require("../../constants/Api");
    const MediaType_1 = require("../../constants/MediaType");
    const checkParams_1 = require("../../utils/checkParams");
    const base_1 = require("../../pipe/base");
    function BaseService(httpRequest) {
        return {
            oauth: {
                async getToken(params) {
                    checkParams_1.checkParams(params, ['grantType']);
                    return await httpRequest.execute({
                        method: Api_1.Api.base.getToken,
                        params,
                    });
                },
            },
            async exec(method, params) {
                return await httpRequest.execute({
                    method,
                    params,
                });
            },
            async uploadImage(params) {
                checkParams_1.checkParams(params, ['filePath', 'fileName']);
                const res = await httpRequest.execute({
                    method: Api_1.Api.base.upload,
                    params: {
                        imageName: params.fileName,
                        imageContent: params.filePath,
                        imageType: !params.fileType ? MediaType_1.MediaType.JPG : params.fileType,
                    }
                });
                return base_1.base.convertUploadResponse(res);
            },
            async uploadVideo(params) {
                checkParams_1.checkParams(params, ['filePath', 'fileName']);
                const res = await httpRequest.execute({
                    method: Api_1.Api.base.upload,
                    params: {
                        imageName: params.fileName,
                        imageContent: params.filePath,
                        imageType: MediaType_1.MediaType.MP4,
                    },
                });
                return base_1.base.convertUploadResponse(res);
            },
            async getUserInfo(params = {}) {
                const res = await httpRequest.execute({
                    method: Api_1.Api.base.getUserInfo,
                    params,
                });
                return res;
            },
        };
    }
    exports.BaseService = BaseService;
});
