(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "../../pipe/marketing", "../../constants/Api", "../../utils/checkParams", "../../errors/FeatureNotSupportError"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    const marketing_1 = require("../../pipe/marketing");
    const Api_1 = require("../../constants/Api");
    const checkParams_1 = require("../../utils/checkParams");
    const FeatureNotSupportError_1 = require("../../errors/FeatureNotSupportError");
    function MarketingService(httpRequest) {
        return {
            async createTemplate(params) {
                throw FeatureNotSupportError_1.FeatureNotSupportError();
                checkParams_1.checkParams(params, ['uniqueId', 'tplContent']);
                const result = await httpRequest.execute({
                    method: Api_1.Api.marketing.createTemplate,
                    params: marketing_1.marketing.createTemplateRequest(params),
                });
                return marketing_1.marketing.templateResponse(result);
            },
            async updateTemplate(params) {
                throw FeatureNotSupportError_1.FeatureNotSupportError();
                checkParams_1.checkParams(params, ['tplId', 'tplContent']);
                const result = await httpRequest.execute({
                    method: Api_1.Api.marketing.updateTemplate,
                    params: marketing_1.marketing.updateTemplateRequest(params),
                });
                return marketing_1.marketing.templateResponse(result);
            },
            async updateInstance(params) {
                throw FeatureNotSupportError_1.FeatureNotSupportError();
                checkParams_1.checkParams(params, ['serialNumber', 'channelId']);
                const result = await httpRequest.execute({
                    method: Api_1.Api.marketing.updateInstance,
                    params,
                });
                return marketing_1.marketing.instanceResponse(result);
            },
            async addInstance(params) {
                throw FeatureNotSupportError_1.FeatureNotSupportError();
                checkParams_1.checkParams(params, ['tplId', 'tplParams', 'recognitionType', 'recognitionInfo']);
                const result = await httpRequest.execute({
                    method: Api_1.Api.marketing.addInstance,
                    params,
                });
                return marketing_1.marketing.instanceResponse(result);
            },
            async triggerCash(params) {
                throw FeatureNotSupportError_1.FeatureNotSupportError();
                checkParams_1.checkParams(params, ['userId', 'crowdNo']);
                const result = await httpRequest.execute({
                    method: Api_1.Api.marketing.triggerCash,
                    params,
                });
                return result;
            },
            async triggerDrawCamp(params) {
                checkParams_1.checkParams(params, ['campId']);
                const result = await httpRequest.execute({
                    method: Api_1.Api.marketing.triggerDrawCamp,
                    params,
                });
                return result;
            }
        };
    }
    exports.MarketingService = MarketingService;
});
