(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "../../utils/checkParams", "../../constants/Api", "../../pipe/mini", "../../errors/InvalidJSONError"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    const checkParams_1 = require("../../utils/checkParams");
    const Api_1 = require("../../constants/Api");
    const mini_1 = require("../../pipe/mini");
    const InvalidJSONError_1 = require("../../errors/InvalidJSONError");
    function MiniService(httpRequest) {
        return {
            async queryFaceCertifyId(params) {
                checkParams_1.checkParams(params, ['bizId', 'zimId', 'faceType', 'needImg']);
                return await httpRequest.execute({
                    method: Api_1.Api.mini.queryFaceCertifyId,
                    params
                });
            },
            async queryFaceVerified(params) {
                checkParams_1.checkParams(params, ['bizId', 'zimId']);
                const newParams = {
                    ...params,
                };
                if (params.externParam) {
                    try {
                        newParams.externParam = JSON.stringify(params.externParam);
                    }
                    catch (e) {
                        throw InvalidJSONError_1.InvalidJSONError();
                    }
                }
                return await httpRequest.execute({
                    method: Api_1.Api.mini.queryFaceVerified,
                    params,
                });
            },
            async createQrcode(params) {
                checkParams_1.checkParams(params, ['urlParam', 'queryParam', 'describe']);
                let newParams = {
                    urlParam: params.urlParam,
                    queryParam: mini_1.mini.convertQueryParams(params.queryParam),
                    describe: params.describe,
                };
                return await httpRequest.execute({
                    method: Api_1.Api.mini.qrcodeCreate,
                    params: newParams,
                });
            },
            async sendTemplateMessage(params) {
                checkParams_1.checkParams(params, ['toUserId', 'formId', 'userTemplateId', 'page', 'data']);
                const newParams = {
                    toUserId: params.toUserId,
                    formId: params.formId,
                    userTemplateId: params.userTemplateId,
                    page: params.page,
                    data: '',
                };
                try {
                    newParams.data = JSON.stringify(params.data);
                }
                catch (e) {
                    throw InvalidJSONError_1.InvalidJSONError();
                }
                return await httpRequest.execute({
                    method: Api_1.Api.mini.templateMessageSend,
                    params,
                });
            },
            async detectRiskContent(params) {
                checkParams_1.checkParams(params, ['content']);
                return await httpRequest.execute({
                    method: Api_1.Api.mini.riskDetectContent,
                    params,
                });
            }
        };
    }
    exports.MiniService = MiniService;
});
