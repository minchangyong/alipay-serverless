(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "alipay-mini-lib", "../errors/InvalidJSONError"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    const alipay_mini_lib_1 = require("alipay-mini-lib");
    const InvalidJSONError_1 = require("../errors/InvalidJSONError");
    exports.marketing = {
        createTemplateRequest(input) {
            try {
                return {
                    uniqueId: input.uniqueId,
                    tplContent: JSON.stringify(input.tplContent),
                };
            }
            catch (e) {
                throw InvalidJSONError_1.InvalidJSONError();
            }
        },
        updateTemplateRequest(input) {
            try {
                return {
                    tplId: input.tplId,
                    tplContent: JSON.stringify(input.tplContent),
                };
            }
            catch (e) {
                throw InvalidJSONError_1.InvalidJSONError();
            }
        },
        templateResponse(input) {
            try {
                const bizResult = alipay_mini_lib_1.camelcaseKeys(JSON.parse(input.result.result));
                return {
                    requestId: input.requestId,
                    success: input.success,
                    result: {
                        ...input.result,
                        success: JSON.parse(input.result.success),
                        result: bizResult,
                    },
                };
            }
            catch (e) {
                throw InvalidJSONError_1.InvalidJSONError();
            }
        },
        instanceResponse(input) {
            try {
                const bizResult = JSON.parse(input.result.result);
                return {
                    requestId: input.requestId,
                    success: input.success,
                    result: {
                        ...input.result,
                        success: JSON.parse(input.result.success),
                        result: bizResult,
                    }
                };
            }
            catch (e) {
                throw InvalidJSONError_1.InvalidJSONError();
            }
        }
    };
});
